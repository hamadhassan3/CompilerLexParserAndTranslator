(func, ^)
(Integer, ^)
(':', ^)
(ID, numPrint)
('(', ^)
(Integer, ^)
(':', ^)
(ID, num)
(',', ^)
(Integer, ^)
(':', ^)
(ID, length)
(')', ^)
('{', ^)
(Integer, ^)
(':', ^)
(ID, i)
(',', ^)
(ID, j)
(',', ^)
(ID, first)
(',', ^)
(ID, temp)
(';', ^)
(char, ^)
(':', ^)
(ID, a)
(';', ^)
(ID, a)
(':=', ^)
(LITERAL, 'x')
(';', ^)
(print, ^)
('(', ^)
(STRING, "enter number")
(')', ^)
(';', ^)
(In, ^)
('>>', ^)
(ID, i)
(';', ^)
(println, ^)
('(', ^)
(ID, i)
(')', ^)
(';', ^)
(ID, i)
(':=', ^)
(ID, length)
(';', ^)
(while, ^)
(ID, i)
('>', ^)
(NUMCONST, 0)
(':', ^)
('{', ^)
(ID, first)
(':=', ^)
(NUMCONST, 0)
(';', ^)
(COMMENT, /*this line contains a comment*/)
(ID, j)
(':=', ^)
(NUMCONST, 1)
(';', ^)
(while, ^)
(ID, j)
('<', ^)
(ID, i)
(':', ^)
('{', ^)
(ID, write)
('(', ^)
(ID, j)
(')', ^)
(';', ^)
(ID, j)
(':=', ^)
(ID, j)
('+', ^)
(NUMCONST, 1)
(';', ^)
('}', ^)
(if, ^)
(ID, j)
('==', ^)
(NUMCONST, 1)
(':', ^)
('{', ^)
(print, ^)
('(', ^)
(STRING, "one")
(')', ^)
(';', ^)
('}', ^)
(elif, ^)
(ID, j)
('==', ^)
(NUMCONST, 2)
(':', ^)
('{', ^)
(print, ^)
('(', ^)
(STRING, "two")
(')', ^)
(';', ^)
('}', ^)
(else, ^)
('{', ^)
(print, ^)
('(', ^)
(STRING, "others")
(')', ^)
(';', ^)
('}', ^)
(COMMENT, /* this is a comment */)
(ID, i)
(':=', ^)
(ID, i)
('-', -)
(NUMCONST, 1)
(';', ^)
(COMMENT, /*This is a
	Multiline
	Comment*/)
('}', ^)
(print, ^)
('(', ^)
(STRING, "temp is ")
(')', ^)
(';', ^)
(println, ^)
('(', ^)
(ID, temp)
(')', ^)
(';', ^)
(ret, ^)
(ID, i)
(';', ^)
('}', ^)
